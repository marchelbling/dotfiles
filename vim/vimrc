"break vi compatibility
set nocompatible
"prevent file exploit
set modelines=0

"pathogen
call pathogen#infect()

"detect file type
filetype on
"use specific filetype plugins
filetype plugin on
filetype plugin indent on

"code highlight:
syntax on
"colorscheme:
colorscheme wombat256mod
"font:
set guifont=Anonymice\ Powerline\ for\ Powerline:h14
"airline (remplacement for powerline)
let g:airline_theme='wombat'
let g:airline_powerline_fonts=1
set laststatus=2
set t_Co=256
"display list of opened buffers
let g:airline#extensions#tabline#enabled=1
"display buffer filename only
let g:airline#extensions#tabline#fnamemod=':t'

"leader character:
let mapleader = ","

"navigate through tabs
nmap <C-S-tab> :tabprevious<CR>
nmap <C-tab> :tabnext<CR>

"navigate through splits using arrows
nmap <silent> <S-Up> :wincmd k<CR>
nmap <silent> <S-Down> :wincmd j<CR>
nmap <silent> <S-Left> :wincmd h<CR>
nmap <silent> <S-Right> :wincmd l<CR>

"indentation
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
"text layout
set wrap
set textwidth=100
set formatoptions=qrn1
set colorcolumn=100

"show trailing spaces
highlight TrailingSpaces ctermbg=red guibg=red
match TrailingSpaces /\s\+$\|\t/

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start

"vim commands autocompletion
set wildmenu
set wildmode=list:longest,full
set wildignore+=*/tmp/*,*/build*/*,*.o,*.so,*.swp,*.zip,*/vendor/*,*/\.git/*


"search option
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
"clear highlight on 'return':
nnoremap <silent> <CR> :noh<CR>

set paste
set nosmartindent

"manage backup, swap & undo directories
"/!\ this requires that the .vim-* directories exist
"could use  :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1  to create them if needed
set backupdir=~/.vim-back
set directory=~/.vim-swap
set undodir=~/.vim-undo
set backup
set undofile

"json highlight
au BufRead,BufNewFile *.json set filetype=javascript

" no extension filetype
" (from http://stackoverflow.com/questions/2666551/vim-default-syntax-for-files-with-no-extension)
au BufNewFile,BufRead * if &syntax == '' | set filetype=cpp | endif

"python & cpp indentation
autocmd Filetype python setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype cpp    setlocal tabstop=4 shiftwidth=4 softtabstop=4

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

function! DoPrettyJSON()
  " save the filetype so we can restore it later
  let l:origft = &ft
  " this requires a python install
  silent %!python -m json.tool
  exe "set ft=" . l:origft
endfunction
command! PrettyJSON call DoPrettyJSON()

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

" sets clang for C++ with syntastic
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++ -Wall'
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_auto_refresh_includes = 1

"singlecompile shortcuts
nmap <F5> :SCCompile<cr>
nmap <F6> :SCCompileRun<cr>
" use g++ with C++11 support as default C++ compiler
call SingleCompile#SetCompilerTemplate('cpp', 'c++11', 'g++ with C++11 support',
                                      \'clang++', '-std=c++11 -stdlib=libc++ -Wall -o $(FILE_TITLE)$',
                                      \'echo -e "\n---\nOutput:\n" && ./$(FILE_TITLE)$')
call SingleCompile#SetOutfile('cpp', 'c++11', '$(FILE_TITLE)$')
call SingleCompile#ChooseCompiler('cpp', 'c++11')

" ctrlp config (from https://github.com/square/maximum-awesome)
nmap <leader>t :CtrlPMixed<CR>

" git diff
nmap <leader>d :GitGutterToggle
highlight SignColumn guibg=gray17
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
