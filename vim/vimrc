set encoding=utf-8
set nocompatible  " break vi compatibility

" do not automatically add newline at end of file
set noeol
set nofixeol

let mapleader = ","

" Plugins install
call plug#begin('~/.vim/plugged')

Plug 'https://github.com/vim-scripts/wombat256.vim'
Plug 'https://github.com/gryf/wombat256grf'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/henrik/vim-indexed-search'
Plug 'https://github.com/Raimondi/delimitMate'
Plug 'https://github.com/majutsushi/tagbar'
Plug 'https://github.com/godlygeek/tabular'

Plug 'https://github.com/junegunn/goyo.vim'
function! s:goyo_enter()
    " silent !tmux set status off
    " silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
    set noshowmode
    set noshowcmd
    set scrolloff=999
    Limelight
    " ...
endfunction

function! s:goyo_leave()
    " silent !tmux set status on
    " silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
    set showmode
    set showcmd
    set scrolloff=5
    Limelight!
    " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

Plug 'https://github.com/junegunn/limelight.vim'

"{{{
" see http://vimcasts.org/episodes/aligning-text-with-tabular-vim/ for details
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunction
"}}}

Plug 'https://github.com/plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1

Plug 'https://github.com/tomtom/tcomment_vim'
"{{{
" toggle comment on current line/visual selection
map <leader>c :TComment<CR>
"}}}

Plug 'https://github.com/bling/vim-airline'
Plug 'https://github.com/vim-airline/vim-airline-themes'
"{{{
" vim-airline (status bar)
let g:airline_theme='wombat'
let g:airline_powerline_fonts=1
set laststatus=2
set t_Co=256
let g:airline#extensions#tabline#enabled=1     " display list of opened buffers
let g:airline#extensions#tabline#fnamemod=':t' " display buffer filename only
"}}}

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" {{{
let g:fzf_nvim_statusline = 0 " disable statusline overwriting

nnoremap <silent> <leader>p :ProjectFiles<CR>
" search word under cursor or visual selection (if currently in visual mode)
" if invoked with no visual selection or no word under the cursor, this will search in the
" full project as expected
nnoremap <silent> <leader>k :call SearchWordWithAg()<CR>
vnoremap <silent> <leader>k :call SearchVisualSelectionWithAg()<CR>

" from: https://github.com/junegunn/fzf.vim/issues/47#issuecomment-160237795
function! s:find_git_root()
    return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()

function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
endfunction

function! SearchVisualSelectionWithAg() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    execute 'Ag' selection
endfunction
" }}}

Plug 'https://github.com/airblade/vim-gitgutter'
"{{{
highlight SignColumn guibg=gray17
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
"}}}


Plug 'https://github.com/fatih/vim-go',  { 'do': ':GoUpdateBinaries' }
"{{{
let g:go_metalinter_command = "golangci-lint"
let g:go_addtags_transform = "snakecase"
let g:go_fmt_command = "goimports"
let g:go_test_show_name=1
" autocompletion left to CoC
let g:go_def_mapping_enabled = 0
"}}}


Plug 'neoclide/coc.nvim', {'branch': 'release'} " {'do': 'yarn install --frozen-lockfile'}

Plug 'hashivim/vim-terraform'
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)

" Use H to show documentation in preview window
nnoremap <silent> H :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>

let g:coc_global_extensions = [
   \ 'coc-solargraph',
   \ 'coc-python',
   \ 'coc-yaml',
   \ 'coc-json',
   \ 'coc-fzf-preview',
   \ 'coc-sh',
   \ ]
" }} CoC setup

Plug 'https://github.com/sheerun/vim-polyglot' " {'do': './build' }
let g:polyglot_disabled = ['go']
if !empty(matchstr(system('which ruby'), 'rbenv'))
    let g:ruby_path = system('echo $HOME/.rbenv/shims')
endif


if has('nvim')
    " see https://github.com/neovim/neovim/issues/1822
    Plug 'bfredl/nvim-miniyank'
    map p <Plug>(miniyank-autoput)
    map P <Plug>(miniyank-autoPut)
endif

call plug#end()  " required


set modelines=0   " prevent file exploit
set title         " change terminal/window title to buffer name
filetype on                " detect file type
runtime macros/matchit.vim " activate matchit (extended '%' behavior)

:silent !mkdir -p ~/.vim/udata/undo >/dev/null 2>&1
:silent !mkdir -p ~/.vim/udata/back >/dev/null 2>&1
set noswapfile
set backupdir=~/.vim/udata/back
set undodir=~/.vim/udata/undo
set undofile
set history=1000
set undolevels=1000
set confirm " warn for unsaved changes before exiting


""""""" look'n'feel

colorscheme wombat256grf
set guifont=Anonymous\ Pro\ for\ Powerline:h14

" display side file explorer
let g:netrw_liststyle = 3
let g:netrw_winsize   = 15
let g:netrw_banner    = 0
nmap <leader>t :Lex<CR> " This will toggle the file explorer on/off


""""""" code layout

au BufRead,BufNewFile *.json set filetype=javascript               " json
au BufRead * if search('\M-*-c++-*-', 'n', 1) | setlocal ft=cpp | endif
au BufRead,BufNewFile *.tex setlocal ts=2 sw=2

au FileType go set noexpandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4


" automatically reload vim configuration when a change is detected (http://superuser.com/a/417997)
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" indentation
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=0
set colorcolumn=100
set scrolloff=5 " always show at least 5 lines below
set formatoptions+=qrn1
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j " Delete comment character when joining commented lines
endif
set shiftround        " round indent to multiple of shiftwidth
set showcmd           " display current command (nice for <leader>)
set showmatch         " show matching brackets
set showmode
set wrap
set linebreak         " change long lines display
set visualbell        " enable visual bell instead of audio bell
set cursorline        " highlight current line
set ttyfast
set ruler             " show line/column in footer
set gdefault          " set g by default for substitute commands (%s///g)
set clipboard=unnamed " use the system clipboard

" trailing spaces (no automatic killing of them though)
highlight TrailingSpaces ctermbg=red guibg=red
match TrailingSpaces /\s\+$/

" editing
set hidden                     " allow unsaved changes in buffer
set backspace=indent,eol,start " low backspacing over an indent, line break (end of line) or start of an insert

" searching
""" files
if v:version >= 700
    try
        set wildignorecase " case insensitive file completion
    catch
    endtry
endif
set wildmenu       " bash-like tab completion
set wildmode=list:longest,full
set wildignore+=*.o,*.so,*.swp,*.zip,*.pyc,*/vendor/*,*/node_modules/*


""" within buffer
set ignorecase
set smartcase
set incsearch
set hlsearch

"clear highlight on 'return'
nnoremap <silent> <CR> :noh<CR>

" use visual selection as (forward) search
vnoremap <silent> * :<C-U>
            \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
            \gvy/<C-R><C-R>=substitute(
            \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
            \gV:call setreg('"', old_reg, old_regtype)<CR>



""""""" navigation

" navigate through buffers using ctrl-h & ctrl-l in normal/insert modes
nnoremap <C-h> :bprevious<CR>
nnoremap <C-l> :bnext<CR>
inoremap <C-h> <Esc>:bprevious<CR>i
inoremap <C-l> <Esc>:bnext<CR>i
nnoremap <C-x> :bd<CR>

" navigate through splits using arrows
nmap <silent> <S-Up> :wincmd k<CR>
nmap <silent> <S-Down> :wincmd j<CR>
nmap <silent> <S-Left> :wincmd h<CR>
nmap <silent> <S-Right> :wincmd l<CR>


"""""" utilities

" git commit messages with spelling and automatic insert mode
if has("spell")
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
endif

" replace current line by the result of executing the command in a shell
nnoremap <Leader>x !!sh<cr>

" prettify json
function! DoPrettyJSON()
    let l:origft = &ft
    silent %!python -m json.tool
    exe "set ft=" . l:origft
endfunction
command! PrettyJSON call DoPrettyJSON()

" prettify xml
function! DoPrettyXML()
    let l:origft = &ft
    set ft=
    1s/<?xml .*?>//e
    0put ='<PrettyXML>'
    $put ='</PrettyXML>'
    silent %!xmllint --format -
    2d
    $d
    silent %<
    1
    exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

:tnoremap <Esc> <C-\><C-n>

" function! RunTests(filename)
"   " Write the file and run tests for the given filename
"   :w
"   :silent !clear
"   if match(a:filename, '\.feature$') != -1
"     exec ":!bundle exec cucumber " . a:filename
"   elseif match(a:filename, '_test\.rb$') != -1
"     if filereadable("script/testrb")
"       exec ":!script/testrb " . a:filename
"     else
"       exec ":!ruby -Itest " . a:filename
"     end
"   else
"     if filereadable("Gemfile")
"       exec ":!bundle exec rspec --color " . a:filename
"     else
"       exec ":!rspec --color " . a:filename
"     end
"   end
" endfunction