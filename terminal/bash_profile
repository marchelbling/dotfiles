#### PATH
export PATH=/usr/local/bin:/usr/local/sbin:$PATH:${HOME}/.todo
export EDITOR="$( which vim )"

#### SHORTCUTS
alias ls='ls -F'
alias depends='otool -L'
alias igt='git'
alias gti='git'
alias gigt='git'
alias gitg='git'


#### HISTORY (from https://github.com/mrzool/bash-sensible/blob/master/sensible.bash)
# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history"

# Append to the history file, don't overwrite it
shopt -s histappend

# Save multi-line commands as one command
shopt -s cmdhist

# Record each line as it gets issued
export PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"

#### GIT
if [ -e /etc/bash-completion ];
then
    . /etc/bash-completion
fi

for binary in "git" "docker"
do
    _autocomplete="${HOME}/.${binary}-completion.bash"
    if [ -e "${_autocomplete}" ]
    then
        . "${_autocomplete}"
    fi
done
# show git branch in shell prompt
# http://betterexplained.com/articles/aha-moments-when-learning-git/ and http://asemanfar.com/Current-Git-Branch-in-Bash-Prompt

function get_relative_path
{
    local root_path="$1"
    echo $( pwd ) | sed "s#${root_path}##g"
}

function parse_repo_path
{
    git rev-parse --show-toplevel 2> /dev/null
}

function parse_branch
{
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

if tty -s && [ $(tput colors) -ge 8 ]  # make sure we are in interactive mode and colors
then
    none="\x01$(      tput sgr0 )\x02"
    pink="\x01$(      tput setaf 218 )\x02"
    red="\x01$(       tput setaf 1 )\x02"
    gray="\x01$(      tput setaf 240 )\x02"
    orange="\x01$(    tput setaf 172 )\x02"
    green="\x01$(     tput setaf 2 )\x02"
    blue="\x01$(      tput setaf 4 )\x02"
    lightgray="\x01$( tput setaf 7 )\x02"
    darkgray="\x01$(  tput bold setaf 0 )\x02"
    bold="\x01$(      tput bold )\x02"
fi

function parse_upstream
{
    local branch="${1}"
    local remote_branch="$( git rev-parse --abbrev-ref @{u} 2>/dev/null )"
    local color="${gray}"
    if [ -z "${remote_branch}" ]  # handle local branch
    then
        local remote=""
    else
        if [ "${remote_branch}" == "@{u}" ]
        then
            local remote="∅ /"  # remote branch deleted
        else
            local remote="${remote_branch%$branch}"  # strip suffix (/branch)

            if ! git diff --quiet "${remote_branch}".."${branch}" 2>&1 >/dev/null;
            then
                local color="${orange}"
            fi
        fi
    fi
    echo -e "${red}(${none}${color}${remote}${none}${red}${branch})${none}"
}

function parse_repo
{
    local repo_path="$1"
    if [ -n "${repo_path}" ]
    then
      local repo=$( basename "${repo_path}" )
      if [ "${repo_path}" != "$( pwd )" ]
      then
          repo="${repo}:"
      fi
    fi
    echo -e "${green}${repo}"
}

function parse_path
{
    local repo_path="$1"
    local my_path="$( pwd )"
    if [ -n "${repo_path}" ]
    then
        my_path=$( get_relative_path "${repo_path}" )
    else
        if [ "${PWD##${HOME}}" != "${PWD}" ]
        then
            my_path="~$( get_relative_path "${HOME}" )"
        fi
    fi

    echo -e "${blue}${my_path}"
}

function parse_diff
{
    if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1
    then
        local diff="$( git status --porcelain )"
        if [ -n "${diff}" ] && echo "${diff}" | grep -v "^?? " &>/dev/null;
        then
            state="✎ "
        fi

        if grep "^?? " <<<"${diff}" &>/dev/null;
        then
            state="${state}⚑"
        fi

        if [ -n "${state}" ]
        then
            echo "${orange}[${state}]${none}"
        fi
    fi
}

function parse_k8s
{
    if which kubectl >/dev/null && kubectl version --request-timeout=1 >/dev/null 2>&1;
    then
        echo -e "${bold}${gray}(k8s=$( kubectl config current-context | rev | cut -d'_' -f1 | rev ))${none}"
    fi
}

function git_prompt
{
    local branch="$( parse_branch )"
    local root="$( parse_repo_path )"
    echo -e "$( parse_repo "${root}" )$( parse_path "${root}" ) $( parse_upstream "${branch}" )$( parse_diff )"
}

function parse_exit
{
    local value=$?
    [ $value == 0 ] && echo -e "" || echo -e "${bold}${red}↳ ${value}${none} "
}

function parse_time
{
    echo -e "${gray}$( date +%H:%M:%S )${none}"
}

function parse_user
{
    echo -e "${bold}${USER}${none}"
}

# for color listing see http://misc.flogisoft.com/bash/tip_colors_and_formatting
shopt -s checkwinsize
PS1="\$( parse_exit )\$( parse_time ) \$( parse_user ) \$( git_prompt ) $ " #"\$( parse_k8s ) $ "

#### COLORS
# to get colors in terminal (see: http://it.toolbox.com/blogs/lim/how-to-fix-colors-on-mac-osx-terminal-37214):
# enables coloring of your terminal:
CLICOLOR=1
# specifies how to color specific items:
LSCOLORS=GxFxCxDxBxegedabagaced

#### SPECIFIC_PROFILE
if [ -e "${HOME}/.specific_profile" ]
then
  source "${HOME}/.specific_profile"
fi

#### PYTHON
export VENV_DIR="${HOME}/.venv"
export DEFAULT_VENV="${DEFAULT_VENV:-env}"

if [ -d "${VENV_DIR}/${DEFAULT_VENV}" ]
then
  source "${VENV_DIR}/${DEFAULT_VENV}/bin/activate"
fi

#### RUBY
# bash completion for ssh (based on .ssh/config)
ssh_config="${HOME}/.ssh/config"
if [ -f ${ssh_config} ] && which ruby 2>&1 >/dev/null;
then
    complete -o default -o nospace -W "$( env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' < ${ssh_config} )" scp sftp ssh
fi

### simple terminal calculator
function calc
{
    awk "BEGIN{ print $* }";
}
export -f calc

function tabname {
    name="${1:-bash}"
    printf "\e]1;${name}\a"
}

function docker_clean
{
    docker rm $( docker ps -q -f status=exited )
    docker rmi $( docker images -f "dangling=true" -q )
}

function get_pixel
{
    local img="$1"
    local x="$2"
    local y="$3"

    local pixel="$( convert "${img}"[1x1+${x}+${y}] -format "%[fx:int(255*r)],%[fx:int(255*g)],%[fx:int(255*b)],%[fx:int(255*a)]" info: )"
    echo "${img} RGB@${x}x${y}: ${pixel}"
}

function nmap_norm
{
    local x="$1"
    local y="$2"
    local z="$3"

cat <<-EOF | python -
import sys
to_float = lambda x: float(x) / 255.
unpack = lambda x: x * 2. - 1.
n_sq = lambda x: unpack(to_float(x)) ** 2
sys.stdout.write("||(${x}, ${y}, ${z})|| = " + str(sum(map(n_sq, [$x, $y, $z]))) + "\n")
EOF
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

if which go >/dev/null && go version >/dev/null;
then
    if [ -z "$GOPATH" ]; then
        mkdir -p "$HOME/go"
        export GOPATH="$HOME/go"
    fi
    export PATH="${PATH}:${GOPATH}/bin"
fi


function uuid4 {
    uuidgen | tr -d '-'  | tr '[:upper:]' '[:lower:]'
}

function ts {
    gdate -u +'%s'
}

export GPG_TTY=$(tty)

if which rbenv >/dev/null;
then
    eval "$(rbenv init -)"
fi


function urldecode {
    python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.argv[1]))" "$1"
}

function urlencode {
    python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.argv[1]))" "$1"
}
