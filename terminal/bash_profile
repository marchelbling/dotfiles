#### PATH
export PATH=/usr/local/bin:/usr/local/sbin:$PATH

#### SHORTCUTS
alias ls='ls -F'
alias depends='otool -L'

#### GIT
source ~/.git-completion.bash
# show git branch in shell prompt
# http://betterexplained.com/articles/aha-moments-when-learning-git/ and http://asemanfar.com/Current-Git-Branch-in-Bash-Prompt

parse_branch()
{
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

get_relative_path()
{
    local root_path=$1
    echo $( pwd ) | sed "s#$root_path##g"
}

parse_repo()
{
    local repo_path="$(git rev-parse --show-toplevel 2> /dev/null)"
    if [ "$repo_path" != "" ]
    then
      local repo=$( basename "${repo_path}" )
      if [ "$repo_path" != "$( pwd )" ]
      then
        repo="${repo}:"
      fi
    fi
    echo "$repo"
}

parse_path()
{
    local my_path="$( pwd )"
    local repo_path="$(git rev-parse --show-toplevel 2> /dev/null)"
    if [ "$repo_path" != "" ]
    then
      my_path=$( get_relative_path "$repo_path" )
    else
      if [ "${PWD##${HOME}}" != "${PWD}" ]
      then
        my_path="~$( get_relative_path "$HOME" )"
      fi
    fi

    echo "$my_path"
}

parse_remote()
{
  local folder="$(git rev-parse --show-toplevel 2> /dev/null ||  pwd )"
  local mount_point="$( mount | grep "$folder" 2>&1 )"
  if [ "$mount_point" == "" ]
  then
    echo ""
  else
    echo "$( echo $mount_point | cut -d':' -f1 )@"
  fi
}

# for color listing see http://misc.flogisoft.com/bash/tip_colors_and_formatting
export PS1="\[\033[00m\]\u@\h \[\033[0;95m\]\$(parse_remote)\[\033[0;32m\]\$(parse_repo)\[\e[0;34m\]\$(parse_path) \[\033[31m\]\$(parse_branch) \[\033[00m\]$\[\033[00m\] "

#### COLORS
# to get colors in terminal (see: http://it.toolbox.com/blogs/lim/how-to-fix-colors-on-mac-osx-terminal-37214):
# enables coloring of your terminal:
export CLICOLOR=1
# specifies how to color specific items:
export LSCOLORS=GxFxCxDxBxegedabagaced

#### SPECIFIC_PROFILE
if [ -e "$HOME/.specific_profile" ]
then
  source "$HOME/.specific_profile"
fi

#### PYTHON
export VENV_DIR=$HOME/.venv
export DEFAULT_VENV=${DEFAULT_VENV:-env}

if [ -d $VENV_DIR/$DEFAULT_VENV ]
then
  source $VENV_DIR/$DEFAULT_VENV/bin/activate
fi

#### RUBY
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# bash completion for ssh (based on .ssh/config)
complete -o default -o nospace -W "$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' < $HOME/.ssh/config)" scp sftp ssh
