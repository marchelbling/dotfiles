#### PATH
export PATH=/usr/local/bin:/usr/local/sbin:$PATH

#### SHORTCUTS
alias ls='ls -F'
alias depends='otool -L'

#### GIT
source ~/.git-completion.bash
# show git branch in shell prompt
# http://betterexplained.com/articles/aha-moments-when-learning-git/ and http://asemanfar.com/Current-Git-Branch-in-Bash-Prompt

function get_relative_path()
{
    local root_path="$1"
    echo $( pwd ) | sed "s#${root_path}##g"
}

function parse_repo_path()
{
    git rev-parse --show-toplevel 2> /dev/null
}

function parse_branch()
{
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

pink="\x01$( tput setaf 218 )\x02"
red="\x01$( tput setaf 1 )\x02"
grey="\x01$( tput setaf 240 )\x02"
orange="\x01$( tput setaf 172 )\x02"
green="\x01$( tput setaf 2 )\x02"
blue="\x01$( tput setaf 4 )\x02"

function parse_shared_folder()
{
  local folder="${1}"
  if [ -z "${folder}" ];
  then
    folder="$( pwd )"
  fi
  local mount_point="$( mount | grep "${folder} " 2>&1 )"
  if [ -n "${mount_point}" ]
  then
    echo "${pink}$( echo ${mount_point} | cut -d':' -f1 )@"
  fi
}

function parse_upstream()
{
  local branch="$1"
  if [ -n "${branch}" ]
  then
    local remote_branch="$( git rev-parse --abbrev-ref @{u} 2>/dev/null )"
    local remote="$( echo "${remote_branch}" | sed "s#${branch}##g" )"
    if [ -n "${remote_branch}" ] && git diff --quiet "${remote_branch}".."${branch}";
    then
      echo "${red}(${grey}${remote}${red}${branch})"
    else
      echo "${red}(${orange}${remote}${red}${branch})"
    fi
  fi
}

function parse_repo()
{
    local repo_path="$1"
    if [ -n "${repo_path}" ]
    then
      local repo=$( basename "${repo_path}" )
      if [ "${repo_path}" != "$( pwd )" ]
      then
        repo="${repo}:"
      fi
    fi
    echo "${green}${repo}"
}

function parse_path()
{
    local repo_path="$1"
    local my_path="$( pwd )"
    if [ -n "${repo_path}" ]
    then
      my_path=$( get_relative_path "${repo_path}" )
    else
      if [ "${PWD##${HOME}}" != "${PWD}" ]
      then
        my_path="~$( get_relative_path "${HOME}" )"
      fi
    fi

    echo "${blue}${my_path}"
}

function parse_diff()
{
  if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1
  then
    if ! git diff-index --quiet HEAD --;
    then
      echo "${orange}[Â±]"
    fi
  fi
}

function git_prompt()
{
  local branch="$( parse_branch )"
  local root="$( parse_repo_path )"
  echo -e "$(parse_shared_folder "${root}" )$(parse_repo "${root}")$(parse_path "${root}") $(parse_upstream "${branch}")$(parse_diff)"
}

# for color listing see http://misc.flogisoft.com/bash/tip_colors_and_formatting
shopt -s checkwinsize
export PS1="\[\033[00m\]\u@\h \$(git_prompt) \[\033[00m\]$\[\033[00m\] "

#### COLORS
# to get colors in terminal (see: http://it.toolbox.com/blogs/lim/how-to-fix-colors-on-mac-osx-terminal-37214):
# enables coloring of your terminal:
export CLICOLOR=1
# specifies how to color specific items:
export LSCOLORS=GxFxCxDxBxegedabagaced

#### SPECIFIC_PROFILE
if [ -e "$HOME/.specific_profile" ]
then
  source "$HOME/.specific_profile"
fi

#### PYTHON
export VENV_DIR=$HOME/.venv
export DEFAULT_VENV=${DEFAULT_VENV:-env}

if [ -d $VENV_DIR/$DEFAULT_VENV ]
then
  source $VENV_DIR/$DEFAULT_VENV/bin/activate
fi

#### RUBY
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# bash completion for ssh (based on .ssh/config)
if which ruby 2>&1 >/dev/null;
then
  complete -o default -o nospace -W "$(env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' < $HOME/.ssh/config)" scp sftp ssh
fi

### simple terminal calculator
function calc()
{
    awk "BEGIN{ print $* }";
}
export -f calc

function tabname {
  name="${1:-bash}"
  printf "\e]1;${name}\a"
}

